# CS104 Summer 2015: Homework 5 Grading Script
# Run with the command: python hw5_checker.py

import sys
sys.path.insert(0, '/')		# Adds the current directory to the system path so that the cs_grading
import cs_grading as CS 	# library of functions can be imported here. 

# General script information. Used to change which text editor you would like to use, whether or not to 
# run valgrind on the student's code, and whether to run specific tests. 
text_editor = 'subl'			# Change to your preferred text editor. 
use_valgrind = 1;				# Change to 1 to use valgrind. 
run_mergesort_test = 1			# Change to 0 to leave the mergesort test out of a run.			# Change to 0 to leave the scc test out of a run.
compile_twitter = 1				# Change to 0 to not run student's makefile to compile their twitter command
automatically_open_files = 1	# Change to 0 to turn of automatic opening of result files. 

# Information for testing mergesort.
mergesort_executable = 'mergesort_test'						# Name of executable generated by compilation 
mergesort_source_files = 'msort_gtest.cpp ../datetime.cpp'		# .cpp files needed for GTest compilation
mergesort_result_file = 'msort_results.txt'					# File where results are placed. 
mergesort_gtest_flags = '--gtest_filter=**'					# Filters for running specific tests. 

# Running test for merge sort. 
if run_mergesort_test:
	CS.compile_student_code(0, source_files = mergesort_source_files, target = mergesort_executable, use_gtest = 1)
	CS.run_executable('./', mergesort_executable, mergesort_gtest_flags + ' > ' + mergesort_result_file, use_valgrind)
	if automatically_open_files:
		CS.open_file(mergesort_result_file, text_editor)

# Cleaning up the directory
CS.remove_file(mergesort_executable)

# Compiling student's twitter program using their makefile
if compile_twitter:
	CS.compile_student_code(1,make_command='-C ../')

